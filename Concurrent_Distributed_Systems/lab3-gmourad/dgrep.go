package main

import (
	"fmt"
	"lab3/mapreduce"
	"os"
	"regexp"
	"strconv"
	"bufio"
	"log"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed
// and the value is the file's contents (the third argument). The pattern
// being grepped is passed in as input_arg (the second argument)
// The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
//

func mapF(filename string, input_arg string, contents string) (res []mapreduce.KeyValue) {
	// TODO: you have to write this function
	file, err := os.Open(filename)
	if(err !=nil){
		log.Fatal(err)
	}
	defer file.Close()
	regex := regexp.MustCompile(input_arg)
	scanner := bufio.NewScanner(file)

	lineNumber := 1
	for scanner.Scan() {
		line := scanner.Text()
		if regex.MatchString(line) {
			res = append(res, mapreduce.KeyValue{Key:   filename + ":" + strconv.Itoa(lineNumber), Value: line})
		}
		lineNumber++
	}

	return res
}


// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
//

func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	return values[0]
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run dgrep.go master sequential pattern x1.txt .. xN.txt)
// 2) Master (e.g., go run dgrep.go master localhost:7777 pattern x1.txt .. xN.txt)
// 3) Worker (e.g., go run dgrep.go worker localhost:7777 localhost:7778 &)

func main() {
     if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if len(os.Args) > 5 {
		if os.Args[1] == "master" {
			var mr *mapreduce.Master
			if os.Args[2] == "sequential" {
				mr = mapreduce.Sequential("dgrep", os.Args[3], os.Args[4:], 2, mapF, reduceF)
			} else {
				mr = mapreduce.Distributed("dgrep", os.Args[3], os.Args[4:], 2, os.Args[2])
			}
			mr.Wait()
		}
	} else if len(os.Args) == 4 && os.Args[1] == "worker" {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	} else {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	}
}
